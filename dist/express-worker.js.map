{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,C,O,W,O,C,G,G,C,I,C,E,C,C,C,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCQA,EAAA,MAAA,CAAA,EAAA,wBAAA,IAAa,GA6Jb,EAAA,MAAA,CAAA,EAAA,gBAAA,IAAa,GArKb,IAAA,EAAA,EAAA,iBAQM,OAAO,EAEU,KAAA,AADrB,CAAA,OAAiC,CAAA,CAAG,AACpC,aAAqB,CAAc,CAAnC,CAAqB,IAAA,CAAA,KAAK,CAAL,CAAiB,CACvC,CAKD,MAAM,EAEJ,MAAQ,CAAA,CAAM,AAEN,CAAA,MAAQ,EAAG,AACX,CAAA,MAAqB,IAAK,AAC1B,CAAA,UAAY,EAAG,AACf,CAAA,SAAW,IAAI,OAAU,AACzB,CAAA,QAAU,GAAI,AAGtB,CAAA,KAAK,CAAY,CAAjB,CAGE,OAFA,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,QAA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","sources":["<anon>","src/index.ts","node_modules/path-to-regexp/dist.es2015/index.js","node_modules/path-to-regexp/src/index.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"8RSWf\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_ExpressWorkerRequest\", ()=>_ExpressWorkerRequest);\nparcelHelpers.export(exports, \"ExpressWorker\", ()=>ExpressWorker);\nvar _pathToRegexp = require(\"path-to-regexp\");\nclass _ExpressWorkerRequest {\n    _self;\n    params = {};\n    constructor(_self){\n        this._self = _self;\n    }\n}\nclass ExpressWorkerResponse {\n    ended = false;\n    _body = \"\";\n    _blob = null;\n    _redirect = \"\";\n    _headers = new Headers();\n    _status = 200;\n    html(data) {\n        this._body = data;\n        this._headers.set(\"Content-Type\", \"text/html\");\n        return this;\n    }\n    text(data) {\n        this._body = data;\n        this._headers.set(\"Content-Type\", \"text/plain\");\n        return this;\n    }\n    json(data) {\n        this._body = JSON.stringify(data);\n        this._headers.set(\"Content-Type\", \"application/json\");\n        return this;\n    }\n    blob(blob) {\n        this._blob = blob;\n        this._headers.set(\"Content-Type\", blob.type);\n        return this;\n    }\n    send(data) {\n        if (typeof data === \"string\") {\n            if (!this._headers.has(\"Content-Type\")) this.html(data);\n            else this._body = data;\n        } else this.json(data);\n        this.end();\n        return this;\n    }\n    status(code) {\n        this._status = code;\n        return this;\n    }\n    set(key, value) {\n        this._headers.set(key, value);\n        return this;\n    }\n    end() {\n        this.ended = true;\n        return this;\n    }\n    redirect(url) {\n        this._redirect = url;\n        return this;\n    }\n    _toResponse() {\n        if (this._redirect) return Response.redirect(this._redirect, 303);\n        return new Response(this._blob ?? this._body, {\n            status: this._status,\n            headers: this._headers\n        });\n    }\n}\nconst requestProxyConfig = {\n    get: (target, key)=>{\n        if (key === \"params\") return target.params;\n        const value = target._self[key];\n        if (typeof value === \"function\") return value.bind(target._self);\n        return target[key];\n    }\n};\nfunction isReq(request) {\n    return request instanceof _ExpressWorkerRequest;\n}\nclass ExpressWorker {\n    _debug = false;\n    paths = {\n        GET: [],\n        POST: [],\n        PATCH: [],\n        PUT: [],\n        DELETE: [],\n        USE: []\n    };\n    boundFetchHandler = this.handleFetch.bind(this);\n    constructor(options){\n        self.addEventListener(\"fetch\", this.boundFetchHandler);\n        if (options?.debug) {\n            this._debug = true;\n            console.log(\"ExpressWorker initialized\");\n        }\n    }\n    get(path, handler) {\n        this.paths.GET.push([\n            path,\n            handler\n        ]);\n    }\n    post(path, handler) {\n        this.paths.POST.push([\n            path,\n            handler\n        ]);\n    }\n    put(path, handler) {\n        this.paths.PUT.push([\n            path,\n            handler\n        ]);\n    }\n    patch(path, handler) {\n        this.paths.PATCH.push([\n            path,\n            handler\n        ]);\n    }\n    delete(path, handler) {\n        this.paths.DELETE.push([\n            path,\n            handler\n        ]);\n    }\n    use(handler) {\n        this.paths.USE.push(handler.bind(this));\n    }\n    async handleRequest(event) {\n        if (!(event instanceof FetchEvent)) throw new Error(\"Event must be a FetchEvent\");\n        const request = event.request;\n        const req = new Proxy(new _ExpressWorkerRequest(request), requestProxyConfig);\n        const res = new ExpressWorkerResponse();\n        if (!isReq(req)) throw new Error(\"Request must be a proxied ExpressWorkerRequest.\");\n        for (const middleware of this.paths.USE){\n            await middleware(req, res);\n            if (res.ended) break;\n        }\n        let hasBeenHandled = false;\n        if (!this.isMethodEnum(request.method)) throw new Error(\"Must be a valid method.\");\n        for (const [path, handler] of this.paths[request.method]){\n            if (res.ended) break;\n            if (path === \"*\") continue;\n            const keys = [];\n            const match = (0, _pathToRegexp.pathToRegexp)(path, keys).exec(new URL(request.url).pathname);\n            if (!match) continue;\n            const params = Object.fromEntries(keys.map((key, index)=>[\n                    key.name,\n                    match?.[index + 1]\n                ]).filter(Boolean));\n            req.params = params;\n            await handler(req, res);\n            hasBeenHandled = true;\n        }\n        if (!hasBeenHandled) for (const [path, handler] of this.paths[request.method]){\n            if (res.ended) break;\n            if (path !== \"*\") continue;\n            await handler(req, res);\n            hasBeenHandled = true;\n        }\n        if (!hasBeenHandled) return fetch(request);\n        return res._toResponse();\n    }\n    handleFetch(event) {\n        if (!(event instanceof FetchEvent)) throw new Error(\"ExpressWorkerApp must be initialized with a FetchEvent\");\n        if (!this.isMethodEnum(event.request.method)) return;\n        return event.respondWith(this.handleRequest(event));\n    }\n    isMethodEnum(method) {\n        return method === \"GET\" || method === \"POST\" || method === \"PATCH\" || method === \"PUT\" || method === \"DELETE\";\n    }\n    __reset() {\n        this.paths = {\n            GET: [],\n            POST: [],\n            PATCH: [],\n            PUT: [],\n            DELETE: [],\n            USE: []\n        };\n    }\n    static applyAdditionalRequestProperties(handler) {\n        return async (req, res)=>{\n            return await handler(req, res);\n        };\n    }\n}\n\n},{\"path-to-regexp\":\"bN5Da\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"bN5Da\":[function(require,module,exports) {\n/**\n * Tokenize input string.\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Parse a string for the raw tokens.\n */ parcelHelpers.export(exports, \"parse\", ()=>parse);\n/**\n * Compile a string to a template function for the path.\n */ parcelHelpers.export(exports, \"compile\", ()=>compile);\n/**\n * Expose a method for transforming tokens into the path function.\n */ parcelHelpers.export(exports, \"tokensToFunction\", ()=>tokensToFunction);\n/**\n * Create path match function from `path-to-regexp` spec.\n */ parcelHelpers.export(exports, \"match\", ()=>match);\n/**\n * Create a path match function from `path-to-regexp` output.\n */ parcelHelpers.export(exports, \"regexpToFunction\", ()=>regexpToFunction);\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */ parcelHelpers.export(exports, \"tokensToRegexp\", ()=>tokensToRegexp);\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */ parcelHelpers.export(exports, \"pathToRegexp\", ()=>pathToRegexp);\nfunction lexer(str) {\n    var tokens = [];\n    var i = 0;\n    while(i < str.length){\n        var char = str[i];\n        if (char === \"*\" || char === \"+\" || char === \"?\") {\n            tokens.push({\n                type: \"MODIFIER\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"\\\\\") {\n            tokens.push({\n                type: \"ESCAPED_CHAR\",\n                index: i++,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({\n                type: \"OPEN\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({\n                type: \"CLOSE\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \":\") {\n            var name = \"\";\n            var j = i + 1;\n            while(j < str.length){\n                var code = str.charCodeAt(j);\n                if (// `0-9`\n                code >= 48 && code <= 57 || // `A-Z`\n                code >= 65 && code <= 90 || // `a-z`\n                code >= 97 && code <= 122 || // `_`\n                code === 95) {\n                    name += str[j++];\n                    continue;\n                }\n                break;\n            }\n            if (!name) throw new TypeError(\"Missing parameter name at \".concat(i));\n            tokens.push({\n                type: \"NAME\",\n                index: i,\n                value: name\n            });\n            i = j;\n            continue;\n        }\n        if (char === \"(\") {\n            var count = 1;\n            var pattern = \"\";\n            var j = i + 1;\n            if (str[j] === \"?\") throw new TypeError('Pattern cannot start with \"?\" at '.concat(j));\n            while(j < str.length){\n                if (str[j] === \"\\\\\") {\n                    pattern += str[j++] + str[j++];\n                    continue;\n                }\n                if (str[j] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        j++;\n                        break;\n                    }\n                } else if (str[j] === \"(\") {\n                    count++;\n                    if (str[j + 1] !== \"?\") throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n                }\n                pattern += str[j++];\n            }\n            if (count) throw new TypeError(\"Unbalanced pattern at \".concat(i));\n            if (!pattern) throw new TypeError(\"Missing pattern at \".concat(i));\n            tokens.push({\n                type: \"PATTERN\",\n                index: i,\n                value: pattern\n            });\n            i = j;\n            continue;\n        }\n        tokens.push({\n            type: \"CHAR\",\n            index: i,\n            value: str[i++]\n        });\n    }\n    tokens.push({\n        type: \"END\",\n        index: i,\n        value: \"\"\n    });\n    return tokens;\n}\nfunction parse(str, options) {\n    if (options === void 0) options = {};\n    var tokens = lexer(str);\n    var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n    var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n    var result = [];\n    var key = 0;\n    var i = 0;\n    var path = \"\";\n    var tryConsume = function(type) {\n        if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n    };\n    var mustConsume = function(type) {\n        var value = tryConsume(type);\n        if (value !== undefined) return value;\n        var _a = tokens[i], nextType = _a.type, index = _a.index;\n        throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n    };\n    var consumeText = function() {\n        var result = \"\";\n        var value;\n        while(value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))result += value;\n        return result;\n    };\n    while(i < tokens.length){\n        var char = tryConsume(\"CHAR\");\n        var name = tryConsume(\"NAME\");\n        var pattern = tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            var prefix = char || \"\";\n            if (prefixes.indexOf(prefix) === -1) {\n                path += prefix;\n                prefix = \"\";\n            }\n            if (path) {\n                result.push(path);\n                path = \"\";\n            }\n            result.push({\n                name: name || key++,\n                prefix: prefix,\n                suffix: \"\",\n                pattern: pattern || defaultPattern,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        var value = char || tryConsume(\"ESCAPED_CHAR\");\n        if (value) {\n            path += value;\n            continue;\n        }\n        if (path) {\n            result.push(path);\n            path = \"\";\n        }\n        var open = tryConsume(\"OPEN\");\n        if (open) {\n            var prefix = consumeText();\n            var name_1 = tryConsume(\"NAME\") || \"\";\n            var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n            var suffix = consumeText();\n            mustConsume(\"CLOSE\");\n            result.push({\n                name: name_1 || (pattern_1 ? key++ : \"\"),\n                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n                prefix: prefix,\n                suffix: suffix,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        mustConsume(\"END\");\n    }\n    return result;\n}\nfunction compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\nfunction tokensToFunction(tokens, options) {\n    if (options === void 0) options = {};\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function(x) {\n        return x;\n    } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function(token) {\n        if (typeof token === \"object\") return new RegExp(\"^(?:\".concat(token.pattern, \")$\"), reFlags);\n    });\n    return function(data) {\n        var path = \"\";\n        for(var i = 0; i < tokens.length; i++){\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            var optional = token.modifier === \"?\" || token.modifier === \"*\";\n            var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n            if (Array.isArray(value)) {\n                if (!repeat) throw new TypeError('Expected \"'.concat(token.name, '\" to not repeat, but got an array'));\n                if (value.length === 0) {\n                    if (optional) continue;\n                    throw new TypeError('Expected \"'.concat(token.name, '\" to not be empty'));\n                }\n                for(var j = 0; j < value.length; j++){\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) throw new TypeError('Expected all \"'.concat(token.name, '\" to match \"').concat(token.pattern, '\", but got \"').concat(segment, '\"'));\n                    path += token.prefix + segment + token.suffix;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) throw new TypeError('Expected \"'.concat(token.name, '\" to match \"').concat(token.pattern, '\", but got \"').concat(segment, '\"'));\n                path += token.prefix + segment + token.suffix;\n                continue;\n            }\n            if (optional) continue;\n            var typeOfMessage = repeat ? \"an array\" : \"a string\";\n            throw new TypeError('Expected \"'.concat(token.name, '\" to be ').concat(typeOfMessage));\n        }\n        return path;\n    };\n}\nfunction match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\nfunction regexpToFunction(re, keys, options) {\n    if (options === void 0) options = {};\n    var _a = options.decode, decode = _a === void 0 ? function(x) {\n        return x;\n    } : _a;\n    return function(pathname) {\n        var m = re.exec(pathname);\n        if (!m) return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function(i) {\n            if (m[i] === undefined) return \"continue\";\n            var key = keys[i - 1];\n            if (key.modifier === \"*\" || key.modifier === \"+\") params[key.name] = m[i].split(key.prefix + key.suffix).map(function(value) {\n                return decode(value, key);\n            });\n            else params[key.name] = decode(m[i], key);\n        };\n        for(var i = 1; i < m.length; i++)_loop_1(i);\n        return {\n            path: path,\n            index: index,\n            params: params\n        };\n    };\n}\n/**\n * Escape a regular expression string.\n */ function escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */ function flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */ function regexpToRegexp(path, keys) {\n    if (!keys) return path;\n    var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n    var index = 0;\n    var execResult = groupsRegex.exec(path.source);\n    while(execResult){\n        keys.push({\n            // Use parenthesized substring match if available, index otherwise\n            name: execResult[1] || index++,\n            prefix: \"\",\n            suffix: \"\",\n            modifier: \"\",\n            pattern: \"\"\n        });\n        execResult = groupsRegex.exec(path.source);\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */ function arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function(path) {\n        return pathToRegexp(path, keys, options).source;\n    });\n    return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\n/**\n * Create a path regexp from string input.\n */ function stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) options = {};\n    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n        return x;\n    } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n    var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n    var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for(var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++){\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") route += escapeString(encode(token));\n        else {\n            var prefix = escapeString(encode(token.prefix));\n            var suffix = escapeString(encode(token.suffix));\n            if (token.pattern) {\n                if (keys) keys.push(token);\n                if (prefix || suffix) {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        var mod = token.modifier === \"*\" ? \"?\" : \"\";\n                        route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n                    } else route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n                } else if (token.modifier === \"+\" || token.modifier === \"*\") route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n                else route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n            } else route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n        }\n    }\n    if (end) {\n        if (!strict) route += \"\".concat(delimiterRe, \"?\");\n        route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n    } else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === undefined;\n        if (!strict) route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n        if (!isEndDelimited) route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n    }\n    return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp) return regexpToRegexp(path, keys);\n    if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n    return stringToRegexp(path, keys, options);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"8RSWf\"], \"8RSWf\", \"parcelRequire24ce\")\n\n//# sourceMappingURL=express-worker.js.map\n","import { Key, pathToRegexp } from 'path-to-regexp';\r\n\r\n/**\r\n * Wraps the native Request object and adds the `params` object.\r\n *\r\n * This will be wrapped in a Proxy to provide direct access to the\r\n * native Request object.\r\n **/\r\nexport class _ExpressWorkerRequest {\r\n  params: Record<string, string> = {};\r\n  constructor(readonly _self: Request) {}\r\n}\r\n\r\n/**\r\n * Provides an API for modifying the response before it is sent.\r\n */\r\nclass ExpressWorkerResponse {\r\n  /** Whether the response has been ended and should not be modified. */\r\n  ended = false;\r\n\r\n  private _body = '';\r\n  private _blob: Blob | null = null;\r\n  private _redirect = '';\r\n  private _headers = new Headers();\r\n  private _status = 200;\r\n\r\n  /* Populates the body and sets the `Content-Type` header to HTML. */\r\n  html(data: string) {\r\n    this._body = data;\r\n    this._headers.set('Content-Type', 'text/html');\r\n    return this;\r\n  }\r\n\r\n  /* Populates the body and sets the `Content-Type` header to text. */\r\n  text(data: string) {\r\n    this._body = data;\r\n    this._headers.set('Content-Type', 'text/plain');\r\n    return this;\r\n  }\r\n\r\n  /* Populates the body and sets the `Content-Type` header to JSON. */\r\n  json(data: unknown) {\r\n    this._body = JSON.stringify(data);\r\n    this._headers.set('Content-Type', 'application/json');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the body with a Blob and sets the `Content-Type` header to the\r\n   * Blob's type.\r\n   */\r\n  blob(blob: Blob) {\r\n    this._blob = blob;\r\n    this._headers.set('Content-Type', blob.type);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the body, sets the appropriate `Content-Type` header, and ends\r\n   * the response.\r\n   **/\r\n  send(data: string | unknown) {\r\n    if (typeof data === 'string') {\r\n      if (!this._headers.has('Content-Type')) {\r\n        this.html(data);\r\n      } else {\r\n        this._body = data;\r\n      }\r\n    } else {\r\n      this.json(data);\r\n    }\r\n\r\n    this.end();\r\n    return this;\r\n  }\r\n\r\n  /** Sets the status code. */\r\n  status(code: number) {\r\n    this._status = code;\r\n    return this;\r\n  }\r\n\r\n  /** Sets a Header key-value pair. */\r\n  set(key: string, value: string) {\r\n    this._headers.set(key, value);\r\n    return this;\r\n  }\r\n\r\n  /** Ends the response. */\r\n  end() {\r\n    this.ended = true;\r\n    return this;\r\n  }\r\n\r\n  /** Mark the request as a redirect. */\r\n  redirect(url: string) {\r\n    this._redirect = url;\r\n    return this;\r\n  }\r\n\r\n  /** Generates a Response object from the ExpressWorkerResponse. */\r\n  _toResponse() {\r\n    if (this._redirect) {\r\n      return Response.redirect(this._redirect, 303);\r\n    }\r\n\r\n    return new Response(this._blob ?? this._body, {\r\n      status: this._status,\r\n      headers: this._headers,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * The type of the ExpressWorkerRequest object when wrapped in a Proxy.\r\n */\r\nexport type ExpressWorkerRequest = Request & {\r\n  _self: _ExpressWorkerRequest;\r\n  params: Record<string, string>;\r\n};\r\n\r\n/**\r\n * The handler function for `get`, `post`, `put`, `patch`, and `delete` methods.\r\n */\r\nexport interface ExpressWorkerHandler {\r\n  (req: ExpressWorkerRequest, res: ExpressWorkerResponse): void | Promise<void>;\r\n}\r\n\r\n/**\r\n * The way the requests are stored.\r\n *\r\n * The first element is the path, the second is the handler.\r\n */\r\ntype PathArray = [string, ExpressWorkerHandler][];\r\n\r\n/**\r\n * The options for the ExpressWorkerRequest Proxy. This allows direct access to\r\n * the native Request object, along with the `params` object.\r\n */\r\nconst requestProxyConfig: ProxyHandler<_ExpressWorkerRequest> = {\r\n  get: (target, key) => {\r\n    if (key === 'params') {\r\n      return target.params;\r\n    }\r\n\r\n    const value = target._self[key as keyof typeof target._self];\r\n\r\n    if (typeof value === 'function') {\r\n      return value.bind(target._self);\r\n    }\r\n\r\n    return target[key as keyof typeof target];\r\n  },\r\n};\r\n\r\n/**\r\n * Guards for whether a request is a proxied ExpressWorkerRequest.\r\n */\r\nfunction isReq(request: unknown): request is ExpressWorkerRequest {\r\n  return request instanceof _ExpressWorkerRequest;\r\n}\r\n\r\n/**\r\n * The main class for ExpressWorker.\r\n */\r\nexport class ExpressWorker {\r\n  /** Whether to display logs in the console. */\r\n  _debug = false;\r\n\r\n  /** The paths and handlers for each method. */\r\n  private paths: {\r\n    GET: PathArray;\r\n    POST: PathArray;\r\n    PATCH: PathArray;\r\n    PUT: PathArray;\r\n    DELETE: PathArray;\r\n    USE: ExpressWorkerHandler[];\r\n  } = {\r\n    GET: [],\r\n    POST: [],\r\n    PATCH: [],\r\n    PUT: [],\r\n    DELETE: [],\r\n    USE: [],\r\n  };\r\n\r\n  private boundFetchHandler = this.handleFetch.bind(this);\r\n\r\n  constructor(options?: { debug?: boolean }) {\r\n    self.addEventListener('fetch', this.boundFetchHandler);\r\n\r\n    if (options?.debug) {\r\n      this._debug = true;\r\n      console.log('ExpressWorker initialized');\r\n    }\r\n  }\r\n\r\n  /** Registers a GET event handler. */\r\n  get(path: string, handler: ExpressWorkerHandler) {\r\n    this.paths.GET.push([path, handler]);\r\n  }\r\n\r\n  /** Registers a POST event handler. */\r\n  post(path: string, handler: ExpressWorkerHandler) {\r\n    this.paths.POST.push([path, handler]);\r\n  }\r\n\r\n  /** Registers a PUT event handler. */\r\n  put(path: string, handler: ExpressWorkerHandler) {\r\n    this.paths.PUT.push([path, handler]);\r\n  }\r\n\r\n  /** Registers a PATCH event handler. */\r\n  patch(path: string, handler: ExpressWorkerHandler) {\r\n    this.paths.PATCH.push([path, handler]);\r\n  }\r\n\r\n  /** Registers a DELETE event handler. */\r\n  delete(path: string, handler: ExpressWorkerHandler) {\r\n    this.paths.DELETE.push([path, handler]);\r\n  }\r\n\r\n  /** Registers a middleware handler. */\r\n  use(handler: ExpressWorkerHandler) {\r\n    this.paths.USE.push(handler.bind(this));\r\n  }\r\n\r\n  /** Processes a request and returns a response. */\r\n  async handleRequest(event: Event): Promise<Response> {\r\n    if (!(event instanceof FetchEvent)) {\r\n      throw new Error('Event must be a FetchEvent');\r\n    }\r\n\r\n    const request = event.request;\r\n\r\n    const req = new Proxy(\r\n      new _ExpressWorkerRequest(request),\r\n      requestProxyConfig,\r\n    );\r\n\r\n    const res = new ExpressWorkerResponse();\r\n\r\n    if (!isReq(req)) {\r\n      throw new Error('Request must be a proxied ExpressWorkerRequest.');\r\n    }\r\n\r\n    for (const middleware of this.paths.USE) {\r\n      await middleware(req, res);\r\n\r\n      if (res.ended) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    let hasBeenHandled = false;\r\n\r\n    if (!this.isMethodEnum(request.method)) {\r\n      throw new Error('Must be a valid method.');\r\n    }\r\n\r\n    for (const [path, handler] of this.paths[request.method]) {\r\n      if (res.ended) {\r\n        break;\r\n      }\r\n\r\n      if (path === '*') {\r\n        continue;\r\n      }\r\n\r\n      const keys: Key[] = [];\r\n      const match = pathToRegexp(path, keys).exec(\r\n        new URL(request.url).pathname,\r\n      );\r\n\r\n      if (!match) {\r\n        continue;\r\n      }\r\n\r\n      const params = Object.fromEntries(\r\n        keys\r\n          .map((key, index) => [key.name, match?.[index + 1]])\r\n          .filter(Boolean),\r\n      );\r\n\r\n      req.params = params;\r\n\r\n      await handler(req, res);\r\n\r\n      hasBeenHandled = true;\r\n    }\r\n\r\n    if (!hasBeenHandled) {\r\n      for (const [path, handler] of this.paths[request.method]) {\r\n        if (res.ended) {\r\n          break;\r\n        }\r\n\r\n        if (path !== '*') {\r\n          continue;\r\n        }\r\n\r\n        await handler(req, res);\r\n\r\n        hasBeenHandled = true;\r\n      }\r\n    }\r\n\r\n    if (!hasBeenHandled) {\r\n      return fetch(request);\r\n    }\r\n\r\n    return res._toResponse();\r\n  }\r\n\r\n  /** Handles the fetch event. */\r\n  handleFetch(event: Event) {\r\n    if (!(event instanceof FetchEvent)) {\r\n      throw new Error('ExpressWorkerApp must be initialized with a FetchEvent');\r\n    }\r\n\r\n    if (!this.isMethodEnum(event.request.method)) {\r\n      return;\r\n    }\r\n\r\n    return event.respondWith(this.handleRequest(event));\r\n  }\r\n\r\n  /** Checks whether a method is a valid HTTP method. */\r\n  isMethodEnum(\r\n    method: string,\r\n  ): method is 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' {\r\n    return (\r\n      method === 'GET' ||\r\n      method === 'POST' ||\r\n      method === 'PATCH' ||\r\n      method === 'PUT' ||\r\n      method === 'DELETE'\r\n    );\r\n  }\r\n\r\n  /** Resets the paths. For use in tests only. */\r\n  __reset() {\r\n    this.paths = {\r\n      GET: [],\r\n      POST: [],\r\n      PATCH: [],\r\n      PUT: [],\r\n      DELETE: [],\r\n      USE: [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate a modified handler that includes any middleware properties.\r\n   */\r\n  static applyAdditionalRequestProperties<T extends Object>(\r\n    handler: (\r\n      req: ExpressWorkerRequest & T,\r\n      res: ExpressWorkerResponse,\r\n    ) => void | Promise<void>,\r\n  ) {\r\n    return async (req: ExpressWorkerRequest, res: ExpressWorkerResponse) => {\r\n      return await handler(req as ExpressWorkerRequest & T, res);\r\n    };\r\n  }\r\n}\r\n","/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n    var tokens = [];\n    var i = 0;\n    while (i < str.length) {\n        var char = str[i];\n        if (char === \"*\" || char === \"+\" || char === \"?\") {\n            tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"\\\\\") {\n            tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \":\") {\n            var name = \"\";\n            var j = i + 1;\n            while (j < str.length) {\n                var code = str.charCodeAt(j);\n                if (\n                // `0-9`\n                (code >= 48 && code <= 57) ||\n                    // `A-Z`\n                    (code >= 65 && code <= 90) ||\n                    // `a-z`\n                    (code >= 97 && code <= 122) ||\n                    // `_`\n                    code === 95) {\n                    name += str[j++];\n                    continue;\n                }\n                break;\n            }\n            if (!name)\n                throw new TypeError(\"Missing parameter name at \".concat(i));\n            tokens.push({ type: \"NAME\", index: i, value: name });\n            i = j;\n            continue;\n        }\n        if (char === \"(\") {\n            var count = 1;\n            var pattern = \"\";\n            var j = i + 1;\n            if (str[j] === \"?\") {\n                throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \".concat(j));\n            }\n            while (j < str.length) {\n                if (str[j] === \"\\\\\") {\n                    pattern += str[j++] + str[j++];\n                    continue;\n                }\n                if (str[j] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        j++;\n                        break;\n                    }\n                }\n                else if (str[j] === \"(\") {\n                    count++;\n                    if (str[j + 1] !== \"?\") {\n                        throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n                    }\n                }\n                pattern += str[j++];\n            }\n            if (count)\n                throw new TypeError(\"Unbalanced pattern at \".concat(i));\n            if (!pattern)\n                throw new TypeError(\"Missing pattern at \".concat(i));\n            tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n            i = j;\n            continue;\n        }\n        tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n    }\n    tokens.push({ type: \"END\", index: i, value: \"\" });\n    return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str, options) {\n    if (options === void 0) { options = {}; }\n    var tokens = lexer(str);\n    var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n    var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n    var result = [];\n    var key = 0;\n    var i = 0;\n    var path = \"\";\n    var tryConsume = function (type) {\n        if (i < tokens.length && tokens[i].type === type)\n            return tokens[i++].value;\n    };\n    var mustConsume = function (type) {\n        var value = tryConsume(type);\n        if (value !== undefined)\n            return value;\n        var _a = tokens[i], nextType = _a.type, index = _a.index;\n        throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n    };\n    var consumeText = function () {\n        var result = \"\";\n        var value;\n        while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n            result += value;\n        }\n        return result;\n    };\n    while (i < tokens.length) {\n        var char = tryConsume(\"CHAR\");\n        var name = tryConsume(\"NAME\");\n        var pattern = tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            var prefix = char || \"\";\n            if (prefixes.indexOf(prefix) === -1) {\n                path += prefix;\n                prefix = \"\";\n            }\n            if (path) {\n                result.push(path);\n                path = \"\";\n            }\n            result.push({\n                name: name || key++,\n                prefix: prefix,\n                suffix: \"\",\n                pattern: pattern || defaultPattern,\n                modifier: tryConsume(\"MODIFIER\") || \"\",\n            });\n            continue;\n        }\n        var value = char || tryConsume(\"ESCAPED_CHAR\");\n        if (value) {\n            path += value;\n            continue;\n        }\n        if (path) {\n            result.push(path);\n            path = \"\";\n        }\n        var open = tryConsume(\"OPEN\");\n        if (open) {\n            var prefix = consumeText();\n            var name_1 = tryConsume(\"NAME\") || \"\";\n            var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n            var suffix = consumeText();\n            mustConsume(\"CLOSE\");\n            result.push({\n                name: name_1 || (pattern_1 ? key++ : \"\"),\n                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n                prefix: prefix,\n                suffix: suffix,\n                modifier: tryConsume(\"MODIFIER\") || \"\",\n            });\n            continue;\n        }\n        mustConsume(\"END\");\n    }\n    return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction(tokens, options) {\n    if (options === void 0) { options = {}; }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function (token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\".concat(token.pattern, \")$\"), reFlags);\n        }\n    });\n    return function (data) {\n        var path = \"\";\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            var optional = token.modifier === \"?\" || token.modifier === \"*\";\n            var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n            if (Array.isArray(value)) {\n                if (!repeat) {\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not repeat, but got an array\"));\n                }\n                if (value.length === 0) {\n                    if (optional)\n                        continue;\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not be empty\"));\n                }\n                for (var j = 0; j < value.length; j++) {\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError(\"Expected all \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n                    }\n                    path += token.prefix + segment + token.suffix;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n                }\n                path += token.prefix + segment + token.suffix;\n                continue;\n            }\n            if (optional)\n                continue;\n            var typeOfMessage = repeat ? \"an array\" : \"a string\";\n            throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to be \").concat(typeOfMessage));\n        }\n        return path;\n    };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction(re, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;\n    return function (pathname) {\n        var m = re.exec(pathname);\n        if (!m)\n            return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function (i) {\n            if (m[i] === undefined)\n                return \"continue\";\n            var key = keys[i - 1];\n            if (key.modifier === \"*\" || key.modifier === \"+\") {\n                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n                    return decode(value, key);\n                });\n            }\n            else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for (var i = 1; i < m.length; i++) {\n            _loop_1(i);\n        }\n        return { path: path, index: index, params: params };\n    };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n    if (!keys)\n        return path;\n    var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n    var index = 0;\n    var execResult = groupsRegex.exec(path.source);\n    while (execResult) {\n        keys.push({\n            // Use parenthesized substring match if available, index otherwise\n            name: execResult[1] || index++,\n            prefix: \"\",\n            suffix: \"\",\n            modifier: \"\",\n            pattern: \"\",\n        });\n        execResult = groupsRegex.exec(path.source);\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });\n    return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n    var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n    var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(encode(token));\n        }\n        else {\n            var prefix = escapeString(encode(token.prefix));\n            var suffix = escapeString(encode(token.suffix));\n            if (token.pattern) {\n                if (keys)\n                    keys.push(token);\n                if (prefix || suffix) {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        var mod = token.modifier === \"*\" ? \"?\" : \"\";\n                        route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n                    }\n                    else {\n                        route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n                    }\n                }\n                else {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n                    }\n                    else {\n                        route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n                    }\n                }\n            }\n            else {\n                route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n            }\n        }\n    }\n    if (end) {\n        if (!strict)\n            route += \"\".concat(delimiterRe, \"?\");\n        route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n    }\n    else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\"\n            ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n            : endToken === undefined;\n        if (!strict) {\n            route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n        }\n    }\n    return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp)\n        return regexpToRegexp(path, keys);\n    if (Array.isArray(path))\n        return arrayToRegexp(path, keys, options);\n    return stringToRegexp(path, keys, options);\n}\n//# sourceMappingURL=index.js.map","/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += `((?:${token.pattern})${token.modifier})`;\n          } else {\n            route += `(${token.pattern})${token.modifier}`;\n          }\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","_ExpressWorkerRequest","ExpressWorker","_pathToRegexp","_self","params","constructor","ExpressWorkerResponse","ended","_body","_blob","_redirect","_headers","Headers","_status","html","data","set","text","json","JSON","stringify","blob","type","send","has","end","status","key","value","redirect","url","_toResponse","Response","headers","requestProxyConfig","target","_debug","paths","GET","POST","PATCH","PUT","DELETE","USE","boundFetchHandler","handleFetch","options","addEventListener","debug","console","log","path","handler","push","post","put","patch","delete","use","handleRequest","event","FetchEvent","request","req","Proxy","middleware","hasBeenHandled","isMethodEnum","method","keys","match","pathToRegexp","exec","URL","pathname","fromEntries","map","index","filter","Boolean","fetch","respondWith","__reset","applyAdditionalRequestProperties","parse","str","tokens","lexer","char","j","charCodeAt","TypeError","concat","count","pattern","_a","prefixes","defaultPattern","escapeString","delimiter","result","tryConsume","mustConsume","undefined","nextType","consumeText","prefix","indexOf","suffix","modifier","name_1","pattern_1","compile","tokensToFunction","reFlags","flags","encode","_b","validate","matches","token","RegExp","optional","repeat","Array","isArray","segment","test","String","typeOfMessage","regexpToFunction","re","decode","m","create","_loop_1","split","replace","sensitive","tokensToRegexp","strict","start","_c","_d","_e","_f","endsWith","endsWithRe","delimiterRe","route","_i","tokens_1","mod","endToken","isEndDelimited","parts","regexpToRegexp","groupsRegex","execResult","source","join","interopDefault","a","__esModule","default","exportAll","dest","forEach","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"express-worker.js.map"}