{"mappings":"AAEA;IACE,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC;CACxB;AAED,iCAAiC,CAAC,SAAS,6BAA6B,IACtE,OAAO,GAAG;IACR,MAAM,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CACjC,GAAG,CAAC,CAAC;AAER,oCAAoC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG;IAC3D,IAAI,EAAE,MAAM,CAAC;CACd,CAAC;AAEF,sCAAsC,CAAC,SAAS,6BAA6B;IAC3E,CACE,GAAG,EAAE,qBAAqB,CAAC,CAAC,EAC5B,GAAG,EAAE,qBAAqB,GACzB,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CACzB;AAED;;IAYE,GAAG,CAAC,CAAC,SAAS,6BAA6B,EACzC,IAAI,EAAE,MAAM,EACZ,OAAO,EAAE,qBAAqB,CAAC,CAAC;IAKlC,IAAI,CAAC,CAAC,SAAS,6BAA6B,EAC1C,IAAI,EAAE,MAAM,EACZ,OAAO,EAAE,qBAAqB,CAAC,CAAC;IAKlC,GAAG,CAAC,CAAC,SAAS,6BAA6B,EACzC,OAAO,EAAE,qBAAqB,CAAC,CAAC;IA8BlC,WAAW,CAAC,KAAK,EAAE,KAAK;IAyBxB,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,IAAI,KAAK,GAAG,MAAM;CAGvD","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"import { pathToRegexp } from 'path-to-regexp';\r\n\r\nexport interface ExpressWorkerAdditionalParams {\r\n  [key: string]: unknown;\r\n}\r\n\r\nexport type ExpressWorkerRequest<T extends ExpressWorkerAdditionalParams> =\r\n  Request & {\r\n    params?: Record<string, string>;\r\n  } & T;\r\n\r\nexport type ExpressWorkerResponse = Omit<Response, 'body'> & {\r\n  body: string;\r\n};\r\n\r\nexport interface ExpressWorkerHandler<T extends ExpressWorkerAdditionalParams> {\r\n  (\r\n    req: ExpressWorkerRequest<T>,\r\n    res: ExpressWorkerResponse,\r\n  ): void | Promise<void>;\r\n}\r\n\r\nexport class ExpressWorker {\r\n  private paths = {\r\n    GET: new Map(),\r\n    POST: new Map(),\r\n  };\r\n\r\n  private boundFetchHandler = this.handleFetch.bind(this);\r\n\r\n  constructor() {\r\n    self.addEventListener('fetch', this.boundFetchHandler);\r\n  }\r\n\r\n  get<T extends ExpressWorkerAdditionalParams>(\r\n    path: string,\r\n    handler: ExpressWorkerHandler<T>,\r\n  ) {\r\n    this.paths.GET.set(path, handler);\r\n  }\r\n\r\n  post<T extends ExpressWorkerAdditionalParams>(\r\n    path: string,\r\n    handler: ExpressWorkerHandler<T>,\r\n  ) {\r\n    this.paths.POST.set(path, handler);\r\n  }\r\n\r\n  use<T extends ExpressWorkerAdditionalParams>(\r\n    handler: ExpressWorkerHandler<T>,\r\n  ) {\r\n    this.get<T>('*', handler);\r\n    this.post<T>('*', handler);\r\n  }\r\n\r\n  private async handleRequest(\r\n    method: 'GET' | 'POST',\r\n    request: Request,\r\n    res: ExpressWorkerResponse,\r\n  ): Promise<Response> {\r\n    if (request.method === method) {\r\n      for (const [path, handler] of this.paths[method].entries()) {\r\n        const match = pathToRegexp(path).exec(new URL(request.url).pathname);\r\n\r\n        if (match) {\r\n          const req: ExpressWorkerRequest<ExpressWorkerAdditionalParams> = {\r\n            ...request,\r\n            params: match.groups,\r\n          };\r\n          await handler(req, res);\r\n          const { body, ...responseInit } = res;\r\n          return new Response(body, responseInit);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Response('Not found', { status: 404 });\r\n  }\r\n\r\n  handleFetch(event: Event) {\r\n    if (!(event instanceof FetchEvent)) {\r\n      throw new Error('ExpressWorkerApp must be initialized with a FetchEvent');\r\n    }\r\n\r\n    const res: ExpressWorkerResponse = {\r\n      ...new Response(),\r\n      body: '',\r\n    };\r\n\r\n    return event.respondWith(\r\n      (async () => {\r\n        if (!this.isMethodEnum(event.request.method)) {\r\n          throw new Error(`Unsupported method: ${event.request.method}`);\r\n        }\r\n\r\n        return await this.handleRequest(\r\n          event.request.method,\r\n          event.request,\r\n          res,\r\n        );\r\n      })(),\r\n    );\r\n  }\r\n\r\n  isMethodEnum(method: string): method is 'GET' | 'POST' {\r\n    return method === 'GET' || method === 'POST';\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"express-worker.d.ts.map"}