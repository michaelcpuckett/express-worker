{"mappings":"AAEA,8BAA+B,SAAQ,OAAO;IAC5C,MAAM,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CACjC;AAED,6BAA6B,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG;IACpD,IAAI,EAAE,MAAM,CAAC;CACd,CAAC;AAEF;IACE,CAAC,GAAG,EAAE,oBAAoB,EAAE,GAAG,EAAE,qBAAqB,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;CAC/E;AAED;;IAYE,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IAIlC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IAyBnC,WAAW,CAAC,KAAK,EAAE,KAAK;IAsBxB,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,IAAI,KAAK,GAAG,MAAM;CAGvD","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"import { pathToRegexp } from 'path-to-regexp';\r\n\r\ninterface ExpressWorkerRequest extends Request {\r\n  params?: Record<string, string>;\r\n}\r\n\r\ntype ExpressWorkerResponse = Omit<Response, 'body'> & {\r\n  body: string;\r\n};\r\n\r\ninterface Handler {\r\n  (req: ExpressWorkerRequest, res: ExpressWorkerResponse): void | Promise<void>;\r\n}\r\n\r\nexport class ExpressWorker {\r\n  private paths = {\r\n    GET: new Map(),\r\n    POST: new Map(),\r\n  };\r\n\r\n  private boundFetchHandler = this.handleFetch.bind(this);\r\n\r\n  constructor() {\r\n    self.addEventListener('fetch', this.boundFetchHandler);\r\n  }\r\n\r\n  get(path: string, handler: Handler) {\r\n    this.paths.GET.set(path, handler);\r\n  }\r\n\r\n  post(path: string, handler: Handler) {\r\n    this.paths.POST.set(path, handler);\r\n  }\r\n\r\n  private async handleRequest(\r\n    method: 'GET' | 'POST',\r\n    req: ExpressWorkerRequest,\r\n    res: ExpressWorkerResponse,\r\n  ): Promise<Response> {\r\n    if (req.method === method) {\r\n      for (const [path, handler] of this.paths[method].entries()) {\r\n        const match = pathToRegexp(path).exec(new URL(req.url).pathname);\r\n\r\n        if (match) {\r\n          req.params = match.groups;\r\n          await handler(req, res);\r\n          const { body, ...responseInit } = res;\r\n          return new Response(body, responseInit);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Response('Not found', { status: 404 });\r\n  }\r\n\r\n  handleFetch(event: Event) {\r\n    if (!(event instanceof FetchEvent)) {\r\n      throw new Error('ExpressWorkerApp must be initialized with a FetchEvent');\r\n    }\r\n\r\n    const req: ExpressWorkerRequest = event.request;\r\n    const res: ExpressWorkerResponse = {\r\n      ...new Response(),\r\n      body: '',\r\n    };\r\n\r\n    return event.respondWith(\r\n      (async () => {\r\n        if (!this.isMethodEnum(req.method)) {\r\n          throw new Error(`Unsupported method: ${req.method}`);\r\n        }\r\n\r\n        return await this.handleRequest(req.method, req, res);\r\n      })(),\r\n    );\r\n  }\r\n\r\n  isMethodEnum(method: string): method is 'GET' | 'POST' {\r\n    return method === 'GET' || method === 'POST';\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"express-worker.d.ts.map"}